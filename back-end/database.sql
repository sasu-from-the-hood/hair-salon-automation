-- under here the database schema and sql code fro this project 


-- for the user table 
create table
  public.user (
    id bigint generated by default as identity not null,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    phone_number numeric null,
    password character varying not null default ''::character varying,
    email character varying not null default ''::character varying,
    created_at timestamp with time zone not null default now(),
    image_path text null,
    "userId" text not null,
    method text null default 'from'::text,
    constraint user_pkey primary key (id),
    constraint user_id_key unique (id),
    constraint user_phone_number_key unique (phone_number),
    constraint user_userId_key unique ("userId")
  ) tablespace pg_default;


-- for the refreshToken

create table
  public."refreshToken" (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    "userId" text not null,
    token text not null,
    constraint refreshToken_pkey primary key (id),
    constraint refreshToken_userId_fkey foreign key ("userId") references "user" ("userId") on update cascade on delete set default
  ) tablespace pg_default;

-- Staff Table
CREATE TABLE staff (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15) UNIQUE,
    role VARCHAR(50) NOT NULL, -- Specific roles like Esthetician ,Nail Technician,Hair Stylist
    is_active BOOLEAN DEFAULT TRUE,  -- Status to indicate if the staff member is active
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Resource Table
CREATE TABLE resource (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name VARCHAR(100) NOT NULL, -- Resource or product name
    amount INTEGER NOT NULL CHECK (amount >= 0), -- Available amount of the resource
    usage_amount INTEGER DEFAULT 0 CHECK (usage_amount >= 0), -- Default amount of resource for services
    action VARCHAR(20) NOT NULL CHECK (action IN ('necessary', 'unnecessary')), -- Action to take when the resource is out
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Service Table with Steps Array
CREATE TABLE service (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name VARCHAR(100) NOT NULL, -- Service name
    steps TEXT[] NOT NULL, -- Array containing steps for the service
    time_taken INTERVAL NOT NULL, -- Total time for the entire service
    price DECIMAL(10, 2) NOT NULL CHECK (price >= 0), -- Price of the service
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Service_Resources Table  --optinal
CREATE TABLE service_resources (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    service_id BIGINT NOT NULL,
    resource_id BIGINT NOT NULL,
    quantity INTEGER NOT NULL CHECK (quantity > 0), -- Amount of resource used in the service
    FOREIGN KEY (service_id) REFERENCES service(id) ON DELETE CASCADE,
    FOREIGN KEY (resource_id) REFERENCES resource(id) ON DELETE CASCADE,
    -- UNIQUE (service_id, resource_id) -- Prevent duplicate entries for the same service and resource
);

-- Styles Table
CREATE TABLE styles (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    style_name VARCHAR(100) NOT NULL, -- Style name (e.g., Haircut, Manicure, etc.)
    price DECIMAL(10, 2) NOT NULL CHECK (price >= 0), -- Price of the style
    service_array BIGINT[] NOT NULL, -- Array for services needed to complete this style (references Service IDs)
    description TEXT, -- Description of the style
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- ServiceStyles Table
CREATE TABLE service_styles (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    service_id BIGINT NOT NULL,
    style_id BIGINT NOT NULL,
    FOREIGN KEY (service_id) REFERENCES service(id) ON DELETE CASCADE,
    FOREIGN KEY (style_id) REFERENCES styles(id) ON DELETE CASCADE,
    -- UNIQUE (service_id, style_id) -- Prevent duplicate associations
);

-- Appointments Table
CREATE TABLE appointments (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id BIGINT NOT NULL, -- References Users
    staff_id BIGINT NOT NULL, -- References Staff
    service_id BIGINT NOT NULL, -- References Service
    style_id BIGINT NOT NULL, -- References Style
    appointment_date TIMESTAMP NOT NULL,
    status VARCHAR(20) CHECK (status IN ('Scheduled', 'Completed', 'Cancelled')) DEFAULT 'Scheduled',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE,
    FOREIGN KEY (service_id) REFERENCES service(id) ON DELETE CASCADE,
    FOREIGN KEY (style_id) REFERENCES styles(id) ON DELETE CASCADE,
    UNIQUE (user_id, appointment_date) -- Prevent multiple appointments for the same user at the same time
);

-- AppointmentResources Table for reporting
CREATE TABLE appointment_resources (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    appointment_id BIGINT NOT NULL, -- References Appointments
    resource_id BIGINT NOT NULL, -- References Resources
    quantity_used INTEGER NOT NULL CHECK (quantity_used > 0), -- Quantity of the resource used
    FOREIGN KEY (appointment_id) REFERENCES appointments(id) ON DELETE CASCADE,
    FOREIGN KEY (resource_id) REFERENCES resource(id) ON DELETE CASCADE,
    UNIQUE (appointment_id, resource_id) -- Prevent duplicate resource entries in an appointment
);

-- Indexing Guidelines
CREATE INDEX idx_staff_email ON staff(email);
CREATE INDEX idx_resource_name ON resource(name);
CREATE INDEX idx_service_name ON service(name);
CREATE INDEX idx_appointments_date ON appointments(appointment_date);
CREATE INDEX idx_styles_name ON styles(style_name);